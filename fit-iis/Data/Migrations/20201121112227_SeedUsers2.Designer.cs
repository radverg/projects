// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iis_project.Data;

namespace iis_project.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201121112227_SeedUsers2")]
    partial class SeedUsers2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "e85556ad-a4de-4999-b4c3-530e46cac1ef",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "DOCTOR",
                            ConcurrencyStamp = "61fb69d2-0270-4769-8a7f-d360c062eb20",
                            Name = "DOCTOR",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "INSURANCE",
                            ConcurrencyStamp = "1f74d015-b419-45ea-ad1c-7bf783ed5024",
                            Name = "INSURANCE",
                            NormalizedName = "INSURANCE"
                        },
                        new
                        {
                            Id = "PATIENT",
                            ConcurrencyStamp = "3864b5b5-09cf-4902-8581-7336c0f84f57",
                            Name = "PATIENT",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                            ClaimValue = "Tomáš",
                            UserId = "lekar1@test.cz"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                            ClaimValue = "Jeroušek",
                            UserId = "lekar1@test.cz"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "03.02.1995 0:00:00",
                            UserId = "lekar1@test.cz"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                            ClaimValue = "Jan",
                            UserId = "lekar2@test.cz"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                            ClaimValue = "Martan",
                            UserId = "lekar2@test.cz"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "25.10.2010 0:00:00",
                            UserId = "lekar2@test.cz"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                            ClaimValue = "Jan",
                            UserId = "pacient1@test.cz"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                            ClaimValue = "Pospíšil",
                            UserId = "pacient1@test.cz"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "17.08.1971 0:00:00",
                            UserId = "pacient1@test.cz"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                            ClaimValue = "Hana",
                            UserId = "pacient2@test.cz"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                            ClaimValue = "Novotná",
                            UserId = "pacient2@test.cz"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "04.01.1999 0:00:00",
                            UserId = "pacient2@test.cz"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                            ClaimValue = "Richard",
                            UserId = "admin@test.cz"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                            ClaimValue = "Jarůšek",
                            UserId = "admin@test.cz"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "15.07.1990 0:00:00",
                            UserId = "admin@test.cz"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                            ClaimValue = "Josef",
                            UserId = "pojistovak@test.cz"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                            ClaimValue = "Kováčik",
                            UserId = "pojistovak@test.cz"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "03.02.1995 0:00:00",
                            UserId = "pojistovak@test.cz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "lekar1@test.cz",
                            RoleId = "DOCTOR"
                        },
                        new
                        {
                            UserId = "lekar2@test.cz",
                            RoleId = "DOCTOR"
                        },
                        new
                        {
                            UserId = "pacient1@test.cz",
                            RoleId = "PATIENT"
                        },
                        new
                        {
                            UserId = "pacient2@test.cz",
                            RoleId = "PATIENT"
                        },
                        new
                        {
                            UserId = "admin@test.cz",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "pojistovak@test.cz",
                            RoleId = "INSURANCE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("iis_project.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "lekar1@test.cz",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eb8118c-1181-476d-8043-ee0af86a3f51",
                            Email = "lekar1@test.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LEKAR1@TEST.CZ",
                            NormalizedUserName = "LEKAR1@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEOKacQ9Gk5V38DEP3SgGqRW8/kYZWyJwMmv23teZ0X7YIQd/MBepFyRt+Oklp4vnUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1df08683-b40a-43c1-855b-9209beb6c881",
                            TwoFactorEnabled = false,
                            UserName = "lekar1@test.cz"
                        },
                        new
                        {
                            Id = "lekar2@test.cz",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5541617e-ce8e-4da5-8e75-f13d37d72dfd",
                            Email = "lekar2@test.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LEKAR2@TEST.CZ",
                            NormalizedUserName = "LEKAR2@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEHy1xBdni2ZUAzEuwOwG1MxaUpvtsyApA4lS7x5A9UoFdWOBotMhV1UPqL/cx+N+fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af6f7552-71a1-4a9b-bc7f-8b806dd14adb",
                            TwoFactorEnabled = false,
                            UserName = "lekar2@test.cz"
                        },
                        new
                        {
                            Id = "pacient1@test.cz",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c87e9d3-2980-4ec1-a37e-a20a2e8c4666",
                            Email = "pacient1@test.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACIENT1@TEST.CZ",
                            NormalizedUserName = "PACIENT1@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYw+NEA+orG3B2S82ZS/SHvls1Qywqa1UBOLK3eANjQki6K8dQGQfbyWA+YDhC20w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e81911d8-f021-47ac-93ea-754ec6e6325c",
                            TwoFactorEnabled = false,
                            UserName = "pacient1@test.cz"
                        },
                        new
                        {
                            Id = "pacient2@test.cz",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b99ca187-7d22-4dac-9405-42a1f53af14f",
                            Email = "pacient2@test.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACIENT2@TEST.CZ",
                            NormalizedUserName = "PACIENT2@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAELLgYQLNDa1hpq+xZ30IDSdffjxp8w1wWDFOelkoqQ91+ORPVCeKkKx1n+R3A4+l4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71dedd40-e970-40b5-9fb8-b35b67bc8d30",
                            TwoFactorEnabled = false,
                            UserName = "pacient2@test.cz"
                        },
                        new
                        {
                            Id = "admin@test.cz",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bda0243d-f985-4ca6-a31e-47bb8543d8d0",
                            Email = "admin@test.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.CZ",
                            NormalizedUserName = "ADMIN@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAECvFvVQzgm+K/hf15DsahgzH53pv8LPUQprMIUGln6GMHPNu4btD4Zm8+y6JP7kr3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5340a436-8056-4c2c-a16a-21e4c198c760",
                            TwoFactorEnabled = false,
                            UserName = "admin@test.cz"
                        },
                        new
                        {
                            Id = "pojistovak@test.cz",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ec20e0c-b57d-4ed1-b0bf-1435afac84ab",
                            Email = "pojistovak@test.cz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "POJISTOVAK@TEST.CZ",
                            NormalizedUserName = "POJISTOVAK@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEFzgX6aNghecIo3OpIerj4mZTtGyGyWhJG7VQCkxKuK5DdUJFFPm8aPi8RFUAGy15g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eebbc6b2-aec6-4b5e-b857-b84b4f745332",
                            TwoFactorEnabled = false,
                            UserName = "pojistovak@test.cz"
                        });
                });

            modelBuilder.Entity("iis_project.Data.MedicalAct", b =>
                {
                    b.Property<int>("MedicalActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicalActId");

                    b.ToTable("InsuranceActs");
                });

            modelBuilder.Entity("iis_project.Data.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("iis_project.Data.MedicalReport", b =>
                {
                    b.Property<int>("MedicalReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalTicketId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalReportId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("MedicalTicketId");

                    b.ToTable("MedicalReports");
                });

            modelBuilder.Entity("iis_project.Data.MedicalTicket", b =>
                {
                    b.Property<int>("MedicalTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RecordMedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalTicketId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RecordMedicalRecordId");

                    b.ToTable("MedicalTickets");
                });

            modelBuilder.Entity("iis_project.Data.ReportAct", b =>
                {
                    b.Property<int>("MedicalActId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalReportId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalActId", "MedicalReportId");

                    b.HasIndex("MedicalReportId");

                    b.ToTable("ReportAct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iis_project.Data.MedicalRecord", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("iis_project.Data.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iis_project.Data.MedicalReport", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("iis_project.Data.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalReports")
                        .HasForeignKey("MedicalRecordId");

                    b.HasOne("iis_project.Data.MedicalTicket", "MedicalTicket")
                        .WithMany("MedicalReports")
                        .HasForeignKey("MedicalTicketId");

                    b.Navigation("CreatedBy");

                    b.Navigation("MedicalRecord");

                    b.Navigation("MedicalTicket");
                });

            modelBuilder.Entity("iis_project.Data.MedicalTicket", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("iis_project.Data.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("iis_project.Data.MedicalRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordMedicalRecordId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Doctor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("iis_project.Data.ReportAct", b =>
                {
                    b.HasOne("iis_project.Data.MedicalAct", "MedicalAct")
                        .WithMany("ReportActs")
                        .HasForeignKey("MedicalActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iis_project.Data.MedicalReport", "MedicalReport")
                        .WithMany("ReportActs")
                        .HasForeignKey("MedicalReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalAct");

                    b.Navigation("MedicalReport");
                });

            modelBuilder.Entity("iis_project.Data.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("iis_project.Data.MedicalAct", b =>
                {
                    b.Navigation("ReportActs");
                });

            modelBuilder.Entity("iis_project.Data.MedicalRecord", b =>
                {
                    b.Navigation("MedicalReports");
                });

            modelBuilder.Entity("iis_project.Data.MedicalReport", b =>
                {
                    b.Navigation("ReportActs");
                });

            modelBuilder.Entity("iis_project.Data.MedicalTicket", b =>
                {
                    b.Navigation("MedicalReports");
                });
#pragma warning restore 612, 618
        }
    }
}
