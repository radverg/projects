// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iis_project.Data;

namespace iis_project.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201128183809_ActActive")]
    partial class ActActive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "deadb340-b6d3-4bf3-82d0-bff666338fa2",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "DOCTOR",
                            ConcurrencyStamp = "604a6d94-e04b-426a-aaa5-c4c01c0e0780",
                            Name = "DOCTOR",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "INSURANCE",
                            ConcurrencyStamp = "b46fdfdf-e35e-4543-ad94-a6283b8ccc63",
                            Name = "INSURANCE",
                            NormalizedName = "INSURANCE"
                        },
                        new
                        {
                            Id = "PATIENT",
                            ConcurrencyStamp = "4feeb005-191f-4c1a-9c84-5f05ca84835a",
                            Name = "PATIENT",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "lekar1@test.cz",
                            RoleId = "DOCTOR"
                        },
                        new
                        {
                            UserId = "lekar2@test.cz",
                            RoleId = "DOCTOR"
                        },
                        new
                        {
                            UserId = "pacient1@test.cz",
                            RoleId = "PATIENT"
                        },
                        new
                        {
                            UserId = "pacient2@test.cz",
                            RoleId = "PATIENT"
                        },
                        new
                        {
                            UserId = "admin@test.cz",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "pojistovak@test.cz",
                            RoleId = "INSURANCE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("iis_project.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "lekar1@test.cz",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "03268372-b9a0-422c-b72d-6d41c786e336",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lekar1@test.cz",
                            EmailConfirmed = false,
                            GivenName = "Tomáš",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEKAR1@TEST.CZ",
                            NormalizedUserName = "LEKAR1@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEGfbu46XRBGlgZXmB90Ja7n33xa5Ad6r3mCpRa0ZuHLpSd5NXbERGuRbOMCWH21R4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02e19972-ed73-4dda-8360-36512b1e2ce8",
                            Surname = "Jeroušek",
                            TwoFactorEnabled = false,
                            UserName = "lekar1@test.cz"
                        },
                        new
                        {
                            Id = "lekar2@test.cz",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2010, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "032f96ac-0e33-4cc6-8f11-9b8fa458e310",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lekar2@test.cz",
                            EmailConfirmed = false,
                            GivenName = "Jan",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEKAR2@TEST.CZ",
                            NormalizedUserName = "LEKAR2@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEDenmHRxa27Ii1os8DGDtwhUtaajiqRrOIAWbxNNN7uNcheyOedAAIjFmPs1WOvJ9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "513e0308-bd15-4840-81ad-dae66654b807",
                            Surname = "Martan",
                            TwoFactorEnabled = false,
                            UserName = "lekar2@test.cz"
                        },
                        new
                        {
                            Id = "pacient1@test.cz",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1971, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7fe273d5-b910-4207-b6ba-ec4479df6e18",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pacient1@test.cz",
                            EmailConfirmed = false,
                            GivenName = "Jan",
                            LockoutEnabled = false,
                            NormalizedEmail = "PACIENT1@TEST.CZ",
                            NormalizedUserName = "PACIENT1@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEOzW5beYhTx/kJAnZgSZw47HzuIT3HgNqjhtZ1ZMaIi+k2JylhIbqEE2U0NIf64/Gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9afd2dc-70b1-436e-b91f-48409173fab3",
                            Surname = "Pospíšil",
                            TwoFactorEnabled = false,
                            UserName = "pacient1@test.cz"
                        },
                        new
                        {
                            Id = "pacient2@test.cz",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "621c4a3f-93ea-413f-b7d6-d217b9311d85",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pacient2@test.cz",
                            EmailConfirmed = false,
                            GivenName = "Hana",
                            LockoutEnabled = false,
                            NormalizedEmail = "PACIENT2@TEST.CZ",
                            NormalizedUserName = "PACIENT2@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEBWsB0QOsXQJ9EzQw/8h2Rn7qBgcfuu8CuO/njlA/VoZHLODcNMAzryFO9QgUOqnSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "398220b1-a1dc-4ebc-a69d-eb44384da496",
                            Surname = "Novotná",
                            TwoFactorEnabled = false,
                            UserName = "pacient2@test.cz"
                        },
                        new
                        {
                            Id = "admin@test.cz",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "237513a0-ddd8-4289-abdd-982b7bf69f83",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@test.cz",
                            EmailConfirmed = false,
                            GivenName = "Richard",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.CZ",
                            NormalizedUserName = "ADMIN@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAECBdLrBkC6vVI7bJhZk4bpIrjYkQb0B5RNbdL7LrCmBLIIFEMUFnCbcEASxt7z3JOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5761e97f-1d91-4544-9585-f52f554b3e54",
                            Surname = "Jarůšek",
                            TwoFactorEnabled = false,
                            UserName = "admin@test.cz"
                        },
                        new
                        {
                            Id = "pojistovak@test.cz",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9a45d1c0-b445-46ae-8dd9-c8397d1799c0",
                            DtCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pojistovak@test.cz",
                            EmailConfirmed = false,
                            GivenName = "Josef",
                            LockoutEnabled = false,
                            NormalizedEmail = "POJISTOVAK@TEST.CZ",
                            NormalizedUserName = "POJISTOVAK@TEST.CZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7XJVMQcgF5ixP9ubLqEbijl3yRj935YWTNe6QnAbFmP8nXXWaNYmpaIRS/Jin3Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b84c8571-c713-439a-acaf-4bcd2b770578",
                            Surname = "Kováčik",
                            TwoFactorEnabled = false,
                            UserName = "pojistovak@test.cz"
                        });
                });

            modelBuilder.Entity("iis_project.Data.MedicalAct", b =>
                {
                    b.Property<int>("MedicalActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicalActId");

                    b.ToTable("InsuranceActs");
                });

            modelBuilder.Entity("iis_project.Data.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("iis_project.Data.MedicalReport", b =>
                {
                    b.Property<int>("MedicalReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalTicketId")
                        .HasColumnType("int");

                    b.HasKey("MedicalReportId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("MedicalTicketId");

                    b.ToTable("MedicalReports");
                });

            modelBuilder.Entity("iis_project.Data.MedicalTicket", b =>
                {
                    b.Property<int>("MedicalTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("RecordMedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MedicalTicketId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RecordMedicalRecordId");

                    b.ToTable("MedicalTickets");
                });

            modelBuilder.Entity("iis_project.Data.ReportImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportMedicalReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportMedicalReportId");

                    b.ToTable("ReportImages");
                });

            modelBuilder.Entity("iis_project.Data.TicketAct", b =>
                {
                    b.Property<int>("TicketActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("MedicalActId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalTicketId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TicketActId");

                    b.HasIndex("MedicalActId");

                    b.HasIndex("MedicalTicketId");

                    b.ToTable("TicketActs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iis_project.Data.MedicalRecord", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("iis_project.Data.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iis_project.Data.MedicalReport", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iis_project.Data.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalReports")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("iis_project.Data.MedicalTicket", "MedicalTicket")
                        .WithMany("MedicalReports")
                        .HasForeignKey("MedicalTicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("MedicalRecord");

                    b.Navigation("MedicalTicket");
                });

            modelBuilder.Entity("iis_project.Data.MedicalTicket", b =>
                {
                    b.HasOne("iis_project.Data.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("iis_project.Data.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("iis_project.Data.MedicalRecord", "Record")
                        .WithMany("MedicalTickets")
                        .HasForeignKey("RecordMedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Doctor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("iis_project.Data.ReportImage", b =>
                {
                    b.HasOne("iis_project.Data.MedicalReport", "Report")
                        .WithMany("Images")
                        .HasForeignKey("ReportMedicalReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("iis_project.Data.TicketAct", b =>
                {
                    b.HasOne("iis_project.Data.MedicalAct", "MedicalAct")
                        .WithMany("TicketActs")
                        .HasForeignKey("MedicalActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iis_project.Data.MedicalTicket", "MedicaTicket")
                        .WithMany("TicketActs")
                        .HasForeignKey("MedicalTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalAct");

                    b.Navigation("MedicaTicket");
                });

            modelBuilder.Entity("iis_project.Data.ApplicationUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("iis_project.Data.MedicalAct", b =>
                {
                    b.Navigation("TicketActs");
                });

            modelBuilder.Entity("iis_project.Data.MedicalRecord", b =>
                {
                    b.Navigation("MedicalReports");

                    b.Navigation("MedicalTickets");
                });

            modelBuilder.Entity("iis_project.Data.MedicalReport", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("iis_project.Data.MedicalTicket", b =>
                {
                    b.Navigation("MedicalReports");

                    b.Navigation("TicketActs");
                });
#pragma warning restore 612, 618
        }
    }
}
